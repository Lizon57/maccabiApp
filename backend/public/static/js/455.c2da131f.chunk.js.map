{"version":3,"file":"static/js/455.c2da131f.chunk.js","mappings":"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","sources":["components/common/text-toggler/text-toggler.tsx","pages/user/login-signup.tsx"],"sourcesContent":["import { useState } from \"react\"\r\nimport { FixedLengthArray } from \"../../../models/types/typescript/fixed-length-array\"\r\n\r\n\r\nexport const TextToggler = ({ options, onToggleCallBack }: Props) => {\r\n    const [isFirstOptionActive, setIsFirstOptionActive] = useState(true)\r\n\r\n    const onTogglerClick = () => {\r\n        onToggleCallBack && onToggleCallBack()\r\n        setIsFirstOptionActive(!isFirstOptionActive)\r\n    }\r\n\r\n    return (\r\n        <div className=\"common-cmp--text_toggler__container\" onClick={onTogglerClick}>\r\n            <input type=\"checkbox\" />\r\n            <span className={'option' + (isFirstOptionActive ? ' active' : '')}>{options[0]}</span>\r\n            <span className={'option' + (!isFirstOptionActive ? ' active' : '')}>{options[1]}</span>\r\n            <span className=\"indicator\"></span>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\ntype Props = {\r\n    options: FixedLengthArray<string, 2>\r\n    onToggleCallBack: () => void\r\n}","import { useState } from \"react\"\r\nimport { useNavigate } from \"react-router-dom\"\r\nimport { useGoogleLogin } from '@react-oauth/google'\r\nimport { BiUserCheck } from \"react-icons/bi\"\r\nimport { BsGoogle } from \"react-icons/bs\"\r\nimport { AiFillEye, AiFillEyeInvisible, AiOutlineUserAdd } from \"react-icons/ai\"\r\nimport signupLoginImage from \"../../assets/images/app-layout/signup-login.jpg\"\r\n\r\nimport { login } from \"../../store/action/user-action\"\r\nimport { insertAppMessage } from \"../../store/action/app-state-action\"\r\n\r\nimport { User } from \"../../models/interfaces/user/user\"\r\n\r\nimport { userService } from \"../../services/user/user-service\"\r\n\r\nimport { MainTitle } from \"../../components/common/main-title/main-title\"\r\nimport { TextToggler } from \"../../components/common/text-toggler/text-toggler\"\r\n\r\n\r\nconst LoginSignup = () => {\r\n    const [isSignupPage, setIsSignupPage] = useState(false)\r\n    const [isRevealPassword, setIsRevealPassword] = useState(false)\r\n    const [credential, setCredential] = useState({ email: '', password: '' })\r\n    const [error, setError] = useState('')\r\n    const navigate = useNavigate()\r\n\r\n    const onToggleIsSignupPage = () => setIsSignupPage(!isSignupPage)\r\n\r\n    const handleInputChange = (name: string, value: string) => {\r\n        setCredential(prevState => ({ ...prevState, [name]: value }))\r\n    }\r\n\r\n\r\n    const onGoogleAuthSuccess = async (tokenCode: string) => {\r\n        try {\r\n            const user = await userService.googleSignupLogin(tokenCode)\r\n            onLoginSuccess(user)\r\n        } catch (err) {\r\n            setError('תקלה זמנית בחיבור לחשבון, אנא נסה שנית')\r\n        }\r\n    }\r\n\r\n    const onGoogleLogin = useGoogleLogin({\r\n        onSuccess: ({ code }) => onGoogleAuthSuccess(code),\r\n        flow: 'auth-code',\r\n    })\r\n\r\n\r\n    const onSubmitForm = (ev: React.FormEvent<HTMLFormElement>) => {\r\n        ev.preventDefault()\r\n\r\n        const { email, password } = credential\r\n        if (!email || !password) return\r\n\r\n        onSignupLogin(credential)\r\n    }\r\n\r\n\r\n    const onSignupLogin = async (credential: Credential) => {\r\n        try {\r\n            const user: User = isSignupPage ? await userService.signup(credential) : await userService.login(credential)\r\n            if (user._id) onLoginSuccess(user)\r\n        } catch ({ message }) {\r\n            setError(message as string)\r\n        }\r\n    }\r\n\r\n\r\n    const onLoginSuccess = (user: User) => {\r\n        login(user)\r\n        navigate('/')\r\n        if (isSignupPage) insertAppMessage({ text: 'נרשמת בהצלחה!', title: 'ברוך הבא לאתר!', type: 'success' })\r\n        else insertAppMessage({ text: 'התחברת בהצלחה!', title: 'ברוך הבא לאתר!', type: 'success' })\r\n    }\r\n\r\n\r\n    return (\r\n        <main className=\"user-pages--login-signup__container\">\r\n            <div className=\"layout\">\r\n                <img src={signupLoginImage} alt={isSignupPage ? 'הצטרף למכביפדיה!' : 'התחבר למשתמש!'} />\r\n\r\n                <div className=\"content-container\">\r\n                    <TextToggler options={['התחבר', 'הירשם']} onToggleCallBack={onToggleIsSignupPage} />\r\n\r\n                    <MainTitle\r\n                        text={isSignupPage ? 'הירשם למכביפדיה' : 'ברוך השב למכביפדיה!'}\r\n                        Icon={isSignupPage ? AiOutlineUserAdd : BiUserCheck}\r\n                    />\r\n\r\n                    <form className=\"form-container\" onSubmit={onSubmitForm}>\r\n                        <div className=\"field\">\r\n                            <label>דואר אלקטרוני</label>\r\n                            <input\r\n                                type=\"email\"\r\n                                name=\"email\"\r\n                                placeholder=\"דואר אלקטרוני\"\r\n                                value={credential.email}\r\n                                className={credential.email ? 'pristine' : ''}\r\n                                onChange={({ currentTarget: { name, value } }) => handleInputChange(name, value)}\r\n                            />\r\n                        </div>\r\n                        <div className=\"field\">\r\n                            <label>סיסמה</label>\r\n                            <input\r\n                                type={isRevealPassword ? 'text' : 'password'}\r\n                                name=\"password\"\r\n                                placeholder=\"סיסמה\"\r\n                                className={credential.password ? 'pristine' : ''}\r\n                                value={credential.password}\r\n                                onChange={({ currentTarget: { name, value } }) => handleInputChange(name, value)}\r\n                            />\r\n                            {credential.password && <span className=\"show-password-icon\" onClick={() => setIsRevealPassword(!isRevealPassword)}>\r\n                                {isRevealPassword ? <AiFillEyeInvisible /> : <AiFillEye />}\r\n                            </span>}\r\n                        </div>\r\n\r\n                        {error && <div className=\"error-message\">{error}</div>}\r\n\r\n                        <button className=\"form-login-button\">{isSignupPage ? 'הירשם' : 'התחבר'}</button>\r\n                    </form>\r\n\r\n                    <span className=\"divider\"></span>\r\n\r\n                    <button className=\"google-login-button\" onClick={() => onGoogleLogin()}>\r\n                        {isSignupPage ? 'הירשם' : 'התחבר'} באמצעות <BsGoogle />\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </main >\r\n    )\r\n}\r\n\r\nexport default LoginSignup\r\n\r\n\r\ntype Credential = {\r\n    email: string\r\n    password: string\r\n}"],"names":["TextToggler","options","onToggleCallBack","useState","isFirstOptionActive","setIsFirstOptionActive","className","onClick","type","isSignupPage","setIsSignupPage","isRevealPassword","setIsRevealPassword","email","password","credential","setCredential","error","setError","navigate","useNavigate","handleInputChange","name","value","prevState","onGoogleAuthSuccess","tokenCode","userService","user","onLoginSuccess","onGoogleLogin","useGoogleLogin","onSuccess","code","flow","onSignupLogin","_id","message","login","insertAppMessage","text","title","src","signupLoginImage","alt","Icon","AiOutlineUserAdd","BiUserCheck","onSubmit","ev","preventDefault","placeholder","onChange","currentTarget"],"sourceRoot":""}