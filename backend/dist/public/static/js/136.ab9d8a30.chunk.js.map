{"version":3,"file":"static/js/136.ab9d8a30.chunk.js","mappings":"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","sources":["components/common/error-message/error-message.tsx","pages/entities/entity-remove.tsx","services/local-storage-service.ts","services/entities/entity-item-service.ts"],"sourcesContent":["import { RiEmotionSadFill } from \"react-icons/ri\"\r\n\r\n\r\nexport const ErrorMessage = ({ message = 'שגיאה בטעינת נתונים' }) => {\r\n    return (\r\n        <div className=\"common-cmp--error-message\">\r\n            <div className=\"error-emoji-container\"><RiEmotionSadFill /></div>\r\n\r\n            <div className=\"text\">{message}</div>\r\n        </div>\r\n    )\r\n}","import { useState, useEffect } from \"react\"\r\nimport { useLocation, useNavigate, useParams } from \"react-router-dom\"\r\n\r\nimport { insertAppMessage } from \"../../store/action/app-state-action\"\r\n\r\nimport { entityItemService } from \"../../services/entities/entity-item-service\"\r\n\r\nimport { Entity } from \"../../models/interfaces/entities/entity\"\r\nimport { EntityItem } from \"../../models/types/entities/item/entity-item\"\r\n\r\nimport { ENTITIES_LIST } from \"../../constans/entities-list\"\r\nimport { ICON_TYPE_MAP } from \"../../constans/icon-type-map\"\r\n\r\nimport { MainTitle } from \"../../components/common/main-title/main-title\"\r\nimport { ErrorMessage } from \"../../components/common/error-message/error-message\"\r\nimport { Loader } from \"../../components/common/loader/loader\"\r\nimport { SeoImplement } from \"../../components/common/seo-implement/seo-implement\"\r\n\r\n\r\nconst EntityRemoveWrapper = () => {\r\n    let { pathname } = useLocation()\r\n    pathname = pathname.split('/')[1]\r\n    const entity = ENTITIES_LIST[pathname]\r\n\r\n    return (\r\n        <EntityRemove entity={entity} />\r\n    )\r\n}\r\n\r\n\r\nconst EntityRemove = ({ entity }: Props) => {\r\n    const [item, setItem] = useState<EntityItem>()\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [errorMessage, setErrorMessage] = useState<string>()\r\n\r\n    const { id: EntityItemId } = useParams()\r\n    const navigate = useNavigate()\r\n\r\n\r\n    useEffect(() => {\r\n        if (!isLoading || !EntityItemId) return\r\n\r\n        const loadItem = async () => {\r\n            if (!EntityItemId) return\r\n\r\n            try {\r\n                const item = await entityItemService.getById(entity.name, EntityItemId, true) as EntityItem\r\n                setItem(item)\r\n            } catch ({ message }) {\r\n                setErrorMessage(message as string)\r\n            }\r\n            finally {\r\n                setIsLoading(false)\r\n            }\r\n        }\r\n        loadItem()\r\n    }, [isLoading, entity, EntityItemId])\r\n\r\n\r\n    const onCancel = () => navigate('/')\r\n\r\n    const onApprove = async () => {\r\n        if (!EntityItemId) return\r\n        try {\r\n            await entityItemService.remove(entity.name, EntityItemId)\r\n            insertAppMessage(\r\n                { text: `מחיקת הדף ${item?.entityInfo.name.display} בוצעה בהצלחה`, title: 'מחיקה בוצעה בהצלחה', type: 'success' }\r\n            )\r\n        } catch (err) {\r\n            insertAppMessage(\r\n                { text: `מחיקת הדף ${item?.entityInfo.name.display} נכשלה`, title: 'מחיקה נכשלה', type: 'fail' }\r\n            )\r\n        } finally {\r\n            navigate(`/${entity.name}`)\r\n        }\r\n    }\r\n\r\n\r\n    if (isLoading || !EntityItemId || !item) return <Loader />\r\n    if (errorMessage) return <ErrorMessage message={errorMessage} />\r\n\r\n\r\n    const { display: displayName } = item.entityInfo.name\r\n    const { entityInfo: { name: { display: entityDisplayName } } } = entity\r\n    const Icon = ICON_TYPE_MAP.remove.trash\r\n\r\n    return (\r\n        <>\r\n            <main className=\"entities-pages--entity-remove__container\">\r\n                <MainTitle text=\"מחיקת ערך\" Icon={Icon} />\r\n\r\n                <p className=\"action-text\">\r\n                    האם אתה בטוח שברצונך למחוק את הערך {displayName} ({entityDisplayName})?\r\n                </p>\r\n\r\n                <div className=\"buttons-container\">\r\n                    <button className=\"cancel\" title=\"בטל מחיקה\" onClick={onCancel}>לא</button>\r\n                    <button className=\"approve\" title=\"אשר מחיקה\" onClick={onApprove}>כן</button>\r\n                </div>\r\n            </main>\r\n\r\n            <SeoImplement\r\n                appTitle={`${displayName} (${entityDisplayName}) - הסרה`}\r\n                noIndex\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EntityRemoveWrapper\r\n\r\n\r\ntype Props = {\r\n    entity: Entity\r\n}","const readFromStorage = (key: string) => {\r\n    const value = localStorage.getItem(key)\r\n    if (!value) return\r\n    return JSON.parse(value)\r\n}\r\n\r\nconst saveToStorage = (key: string, value: any) => {\r\n    localStorage.setItem(key, JSON.stringify(value))\r\n}\r\n\r\n\r\nexport const localStorageService = {\r\n    readFromStorage,\r\n    saveToStorage,\r\n}","import { httpService } from \"../http-service\"\r\nimport { localStorageService } from \"../local-storage-service\"\r\n\r\nimport { EntityItem } from \"../../models/types/entities/item/entity-item\"\r\nimport { EntityItemViewDetails } from \"../../models/types/entities/entity-item-view-details\"\r\n\r\n\r\nconst STORAGE_KEY = 'ViewedPages'\r\n\r\n\r\nconst query = async (dbName: string, params: URLSearchParams, archiveState?: string) => {\r\n    if (archiveState) params.set('fArchived', archiveState + '')\r\n\r\n    try {\r\n        return await httpService.get(dbName, params) as EntityItem[]\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nconst getById = async (dbName: string, id: string, isPageAction = false) => {\r\n    try {\r\n        const res = await httpService.get(`${dbName}/${id}`) as EntityItem\r\n\r\n        if (!isPageAction) _handleEntityItemView(dbName, id)\r\n        return res\r\n    }\r\n    catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\n\r\nconst remove = async (dbName: string, id: string) => {\r\n    try {\r\n        await httpService.delete(`${dbName}/${id}`)\r\n    }\r\n    catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\n\r\nconst save = async (dbName: string, item: EntityItem) => {\r\n    try {\r\n        const savedItem = item._id ? await httpService.put(`${dbName}/${item._id}`, item) : await httpService.post(`${dbName}`, item)\r\n        return savedItem\r\n    }\r\n    catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\n\r\nconst getMiniProfilesByPharse = async (pharse: string = '') => {\r\n    try {\r\n        return await httpService.get('profile/getMiniProfilesByPharse', { pharse })\r\n    } catch (err) {\r\n        return []\r\n    }\r\n}\r\n\r\n\r\nconst setEntityItemRate = async (entityName: string, id: string, rate: number) => {\r\n    try {\r\n        const ratePayload = { id, entityName, rate }\r\n        return await httpService.put('entity-item-info-update/rate', { ratePayload })\r\n    }\r\n    catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nconst setEntityItemLikeState = async (entityName: string, id: string, isLike: boolean) => {\r\n    try {\r\n        const likeStatePayload = { id, entityName, isLike }\r\n        return await httpService.put('entity-item-info-update/like', { likeStatePayload })\r\n    }\r\n    catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\n\r\nconst _handleEntityItemView = async (entityName: string, id: string) => {\r\n    let viewList = localStorageService.readFromStorage(STORAGE_KEY) as EntityItemViewDetails[]\r\n    if (!Array.isArray(viewList)) {\r\n        localStorageService.saveToStorage(STORAGE_KEY, [])\r\n        viewList = []\r\n    }\r\n\r\n    viewList.push({ entityName, entityItemId: id })\r\n\r\n    if (viewList.length >= 3) {\r\n        try {\r\n            await httpService.put('entity-item-info-update/view', viewList)\r\n            localStorageService.saveToStorage(STORAGE_KEY, [])\r\n        } catch {\r\n            localStorageService.saveToStorage(STORAGE_KEY, viewList)\r\n        }\r\n    }\r\n    else localStorageService.saveToStorage(STORAGE_KEY, viewList)\r\n}\r\n\r\n\r\nexport const entityItemService = {\r\n    query,\r\n    getById,\r\n    remove,\r\n    save,\r\n    getMiniProfilesByPharse,\r\n    setEntityItemRate,\r\n    setEntityItemLikeState\r\n}"],"names":["ErrorMessage","_ref","_ref$message","message","_jsxs","className","children","_jsx","RiEmotionSadFill","EntityRemove","entity","_useState","useState","_useState2","_slicedToArray","item","setItem","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","errorMessage","setErrorMessage","EntityItemId","useParams","id","navigate","useNavigate","useEffect","loadItem","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_item","wrap","_context","prev","next","abrupt","entityItemService","name","sent","t0","finish","stop","apply","arguments","onApprove","_ref4","_callee2","_context2","insertAppMessage","text","concat","entityInfo","display","title","type","Loader","displayName","entityDisplayName","Icon","ICON_TYPE_MAP","_Fragment","MainTitle","onClick","SeoImplement","appTitle","noIndex","pathname","useLocation","split","ENTITIES_LIST","localStorageService","key","value","localStorage","getItem","JSON","parse","stringify","STORAGE_KEY","query","dbName","params","archiveState","set","httpService","_x","_x2","_x3","getById","isPageAction","res","_args2","length","undefined","_handleEntityItemView","_x4","_x5","remove","_ref3","_callee3","_context3","_x6","_x7","save","_callee4","savedItem","_context4","_id","t1","_x8","_x9","getMiniProfilesByPharse","_ref5","_callee5","pharse","_args5","_context5","setEntityItemRate","_ref6","_callee6","entityName","rate","ratePayload","_context6","_x10","_x11","_x12","setEntityItemLikeState","_ref7","_callee7","isLike","likeStatePayload","_context7","_x13","_x14","_x15","_ref8","_callee8","viewList","_context8","Array","isArray","push","entityItemId","_x16","_x17"],"sourceRoot":""}