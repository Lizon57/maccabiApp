{"version":3,"file":"static/js/136.290a4492.chunk.js","mappings":"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","sources":["components/common/error-message/error-message.tsx","pages/entities/entity-remove.tsx","services/local-storage-service.ts","services/entities/entity-item-service.ts"],"sourcesContent":["import { RiEmotionSadFill } from \"react-icons/ri\"\r\n\r\n\r\nexport const ErrorMessage = ({ message = 'שגיאה בטעינת נתונים' }) => {\r\n    return (\r\n        <div className=\"common-cmp--error-message\">\r\n            <div className=\"error-emoji-container\"><RiEmotionSadFill /></div>\r\n\r\n            <div className=\"text\">{message}</div>\r\n        </div>\r\n    )\r\n}","import { useState, useEffect } from \"react\"\r\nimport { useLocation, useNavigate, useParams } from \"react-router-dom\"\r\n\r\nimport { insertAppMessage } from \"../../store/action/app-state-action\"\r\n\r\nimport { entityItemService } from \"../../services/entities/entity-item-service\"\r\n\r\nimport { Entity } from \"../../models/interfaces/entities/entity\"\r\nimport { EntityItem } from \"../../models/types/entities/item/entity-item\"\r\n\r\nimport { ENTITIES_LIST } from \"../../constans/entities-list\"\r\nimport { ICON_TYPE_MAP } from \"../../constans/icon-type-map\"\r\n\r\nimport { MainTitle } from \"../../components/common/main-title/main-title\"\r\nimport { ErrorMessage } from \"../../components/common/error-message/error-message\"\r\nimport { Loader } from \"../../components/common/loader/loader\"\r\nimport { SeoImplement } from \"../../components/common/seo-implement/seo-implement\"\r\n\r\n\r\nconst EntityRemoveWrapper = () => {\r\n    let { pathname } = useLocation()\r\n    pathname = pathname.split('/')[1]\r\n    const entity = ENTITIES_LIST[pathname]\r\n\r\n    return (\r\n        <EntityRemove entity={entity} />\r\n    )\r\n}\r\n\r\n\r\nconst EntityRemove = ({ entity }: Props) => {\r\n    const [item, setItem] = useState<EntityItem>()\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [errorMessage, setErrorMessage] = useState<string>()\r\n\r\n    const { id: EntityItemId } = useParams()\r\n    const navigate = useNavigate()\r\n\r\n\r\n    useEffect(() => {\r\n        if (!isLoading || !EntityItemId) return\r\n\r\n        const loadItem = async () => {\r\n            if (!EntityItemId) return\r\n\r\n            try {\r\n                const item = await entityItemService.getById(entity.name, EntityItemId, true) as EntityItem\r\n                setItem(item)\r\n            } catch ({ message }) {\r\n                setErrorMessage(message as string)\r\n            }\r\n            finally {\r\n                setIsLoading(false)\r\n            }\r\n        }\r\n        loadItem()\r\n    }, [isLoading, entity, EntityItemId])\r\n\r\n\r\n    const onCancel = () => navigate('/')\r\n\r\n    const onApprove = async () => {\r\n        if (!EntityItemId) return\r\n        try {\r\n            await entityItemService.remove(entity.name, EntityItemId)\r\n            insertAppMessage(\r\n                { text: `מחיקת הדף ${item?.entityInfo.name.display} בוצעה בהצלחה`, title: 'מחיקה בוצעה בהצלחה', type: 'success' }\r\n            )\r\n        } catch (err) {\r\n            insertAppMessage(\r\n                { text: `מחיקת הדף ${item?.entityInfo.name.display} נכשלה`, title: 'מחיקה נכשלה', type: 'fail' }\r\n            )\r\n        } finally {\r\n            navigate(`/${entity.name}`)\r\n        }\r\n    }\r\n\r\n\r\n    if (isLoading || !EntityItemId || !item) return <Loader />\r\n    if (errorMessage) return <ErrorMessage message={errorMessage} />\r\n\r\n\r\n    const { display: displayName } = item.entityInfo.name\r\n    const { entityInfo: { name: { display: entityDisplayName } } } = entity\r\n    const Icon = ICON_TYPE_MAP.remove.trash\r\n\r\n    return (\r\n        <>\r\n            <main className=\"entities-pages--entity-remove__container\">\r\n                <MainTitle text=\"מחיקת ערך\" Icon={Icon} />\r\n\r\n                <p className=\"action-text\">\r\n                    האם אתה בטוח שברצונך למחוק את הערך {displayName} ({entityDisplayName})?\r\n                </p>\r\n\r\n                <div className=\"buttons-container\">\r\n                    <button className=\"cancel\" title=\"בטל מחיקה\" onClick={onCancel}>לא</button>\r\n                    <button className=\"approve\" title=\"אשר מחיקה\" onClick={onApprove}>כן</button>\r\n                </div>\r\n            </main>\r\n\r\n            <SeoImplement\r\n                appTitle={`${displayName} (${entityDisplayName}) - הסרה`}\r\n                noIndex\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EntityRemoveWrapper\r\n\r\n\r\ntype Props = {\r\n    entity: Entity\r\n}","const readFromStorage = (key: string) => {\r\n    const value = localStorage.getItem(key)\r\n    if (!value) return\r\n    return JSON.parse(value)\r\n}\r\n\r\nconst saveToStorage = (key: string, value: any) => {\r\n    localStorage.setItem(key, JSON.stringify(value))\r\n}\r\n\r\n\r\nexport const localStorageService = {\r\n    readFromStorage,\r\n    saveToStorage,\r\n}","import { httpService } from \"../http-service\"\r\nimport { localStorageService } from \"../local-storage-service\"\r\n\r\nimport { EntityItem } from \"../../models/types/entities/item/entity-item\"\r\nimport { EntityItemViewDetails } from \"../../models/types/entities/entity-item-view-details\"\r\n\r\n\r\nconst STORAGE_KEY = 'ViewedPages'\r\n\r\n\r\nconst query = async (dbName: string, params: URLSearchParams, archiveState?: string) => {\r\n    if (archiveState) params.set('fArchived', archiveState + '')\r\n\r\n    try {\r\n        return await httpService.get(dbName, params) as EntityItem[]\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nconst getById = async (dbName: string, id: string, isPageAction = false) => {\r\n    try {\r\n        const res = await httpService.get(`${dbName}/${id}`) as EntityItem\r\n\r\n        if (!isPageAction) _handleEntityItemView(dbName, id)\r\n        return res\r\n    }\r\n    catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\n\r\nconst remove = async (dbName: string, id: string) => {\r\n    try {\r\n        await httpService.delete(`${dbName}/${id}`)\r\n    }\r\n    catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\n\r\nconst save = async (dbName: string, item: EntityItem) => {\r\n    try {\r\n        const savedItem = item._id ? await httpService.put(`${dbName}/${item._id}`, item) : await httpService.post(`${dbName}`, item)\r\n        return savedItem\r\n    }\r\n    catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\n\r\nconst getMiniProfilesByPharse = async (pharse: string = '') => {\r\n    try {\r\n        return await httpService.get('profile/getMiniProfilesByPharse', { pharse })\r\n    } catch (err) {\r\n        return []\r\n    }\r\n}\r\n\r\n\r\nconst setEntityItemRate = async (entityName: string, id: string, rate: number) => {\r\n    try {\r\n        const ratePayload = { id, entityName, rate }\r\n        return await httpService.put('entity-item-info-update/rate', { ratePayload })\r\n    }\r\n    catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\n\r\nconst _handleEntityItemView = async (entityName: string, id: string) => {\r\n    let viewList = localStorageService.readFromStorage(STORAGE_KEY) as EntityItemViewDetails[]\r\n    if (!Array.isArray(viewList)) {\r\n        localStorageService.saveToStorage(STORAGE_KEY, [])\r\n        viewList = []\r\n    }\r\n\r\n    viewList.push({ entityName, entityItemId: id })\r\n\r\n    if (viewList.length >= 3) {\r\n        try {\r\n            await httpService.put('entity-item-info-update/view', viewList)\r\n            localStorageService.saveToStorage(STORAGE_KEY, [])\r\n        } catch {\r\n            localStorageService.saveToStorage(STORAGE_KEY, viewList)\r\n        }\r\n    }\r\n    else localStorageService.saveToStorage(STORAGE_KEY, viewList)\r\n}\r\n\r\n\r\nexport const entityItemService = {\r\n    query,\r\n    getById,\r\n    remove,\r\n    save,\r\n    getMiniProfilesByPharse,\r\n    setEntityItemRate\r\n}"],"names":["ErrorMessage","message","className","EntityRemove","entity","useState","item","setItem","isLoading","setIsLoading","errorMessage","setErrorMessage","EntityItemId","useParams","id","navigate","useNavigate","useEffect","loadItem","entityItemService","name","onApprove","insertAppMessage","text","entityInfo","display","title","type","displayName","entityDisplayName","Icon","ICON_TYPE_MAP","onClick","appTitle","noIndex","pathname","useLocation","split","ENTITIES_LIST","localStorageService","key","value","localStorage","getItem","JSON","parse","stringify","STORAGE_KEY","query","dbName","params","archiveState","set","httpService","getById","isPageAction","res","_handleEntityItemView","remove","save","_id","savedItem","getMiniProfilesByPharse","pharse","setEntityItemRate","entityName","rate","ratePayload","viewList","Array","isArray","push","entityItemId","length"],"sourceRoot":""}